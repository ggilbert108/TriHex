/* Generated by JSIL v0.8.1 build 20416. See http://jsil.org/ for more information. */ 
/* Generating type stubs only */ 
var $asm04 = JSIL.DeclareAssembly("Microsoft.Xna.Framework.Input.Touch, Version=4.0.0.0, Culture=neutral, PublicKeyToken=842cf8be1de50553");

JSIL.DeclareNamespace("Microsoft");
JSIL.DeclareNamespace("Microsoft.Xna");
JSIL.DeclareNamespace("Microsoft.Xna.Framework");
JSIL.DeclareNamespace("Microsoft.Xna.Framework.Input");
JSIL.DeclareNamespace("Microsoft.Xna.Framework.Input.Touch");
/* enum Microsoft.Xna.Framework.Input.Touch.GestureType */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.Input.Touch.GestureType", 
    BaseType: $asm05.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    Tap: 1, 
    DoubleTap: 2, 
    Hold: 4, 
    HorizontalDrag: 8, 
    VerticalDrag: 16, 
    FreeDrag: 32, 
    Pinch: 64, 
    Flick: 128, 
    DragComplete: 256, 
    PinchComplete: 512, 
  }
);

/* struct Microsoft.Xna.Framework.Input.Touch.GestureSample */ 

(function GestureSample$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm05.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Input.Touch.GestureSample", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 6, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.GestureType"), $asm05.TypeRef("System.TimeSpan"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm00.TypeRef("Microsoft.Xna.Framework.Vector2")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Delta", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector2"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Delta2", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector2"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_GestureType", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.GestureType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Position", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector2"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Position2", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector2"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Timestamp", 
      JSIL.MethodSignature.Return($asm05.TypeRef("System.TimeSpan"))
    );

    $.Field({Static:false, Public:false}, "_gestureType", $asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.GestureType")); 
    $.Field({Static:false, Public:false}, "_timestamp", $asm05.TypeRef("System.TimeSpan")); 
    $.Field({Static:false, Public:false}, "_position", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "_position2", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "_delta", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "_delta2", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Property({Static:false, Public:true }, "GestureType", $asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.GestureType"));

    $.Property({Static:false, Public:true }, "Timestamp", $asm05.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "Position", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Property({Static:false, Public:true }, "Position2", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Property({Static:false, Public:true }, "Delta", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Property({Static:false, Public:true }, "Delta2", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Input.Touch.Touch */ 

(function Touch$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("Microsoft.Xna.Framework.Input.Touch.Touch", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "get_WindowHandle", 
      JSIL.MethodSignature.Return($asm05.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:true , Public:false}, "set_WindowHandle", 
      JSIL.MethodSignature.Action($asm05.TypeRef("System.IntPtr"))
    );

    $.Field({Static:true , Public:false}, "_windowHandle", $asm05.TypeRef("System.IntPtr")); 
    $.Field({Static:true , Public:false}, "SyncObject", $.Object); 
    function Touch__cctor () {
      $thisType._windowHandle = new $asm05.System.IntPtr();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Touch__cctor
    );

    $.Property({Static:true , Public:false}, "WindowHandle", $asm05.TypeRef("System.IntPtr"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Input.Touch.TouchCollection */ 

(function TouchCollection$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm05.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Input.Touch.TouchCollection", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddTouchLocation", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocationState"), 
          $.Single, $.Single, 
          $asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocationState"), $.Single, 
          $.Single
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "FindById", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindById", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.XNAINPUT_TOUCH_LOCATION_STATE")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsConnected", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchCollection+Enumerator"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLocInfo", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.XNAINPUT_TOUCH_LOCATION_STATE")]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchCollection+LocInfo")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPreviousLocation", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lMicrosoft.Xna.Framework.Input.Touch.TouchLocation$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm05.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")]))
    )
      .Overrides($asm05.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm05.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm05.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false}, "Update", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.XNAINPUT_TOUCH_LOCATION_STATE")]), $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.XNAINPUT_TOUCH_LOCATION_STATE")]), 
          $.Boolean
        ])
    );

    $.Field({Static:false, Public:false}, "isConnected", $.Boolean); 
    $.Field({Static:false, Public:false}, "locationCount", $.Int32); 
    $.Field({Static:false, Public:false}, "location0", $asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")); 
    $.Field({Static:false, Public:false}, "location1", $asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")); 
    $.Field({Static:false, Public:false}, "location2", $asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")); 
    $.Field({Static:false, Public:false}, "location3", $asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")); 
    $.Field({Static:false, Public:false}, "location4", $asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")); 
    $.Field({Static:false, Public:false}, "location5", $asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")); 
    $.Field({Static:false, Public:false}, "location6", $asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")); 
    $.Field({Static:false, Public:false}, "location7", $asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")); 
    $.Field({Static:true , Public:false}, "prevLocations", $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")]), function ($pi) {
        return JSIL.Array.New($asm04.Microsoft.Xna.Framework.Input.Touch.TouchLocation, 8);
      }); 
    $.Property({Static:false, Public:true }, "IsConnected", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm05.TypeRef("System.Collections.Generic.IList`1", [$asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")]), 
      /* 1 */ $asm05.TypeRef("System.Collections.Generic.ICollection`1", [$asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")]), 
      /* 2 */ $asm05.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")]), 
      /* 3 */ $asm05.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm05.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* struct Microsoft.Xna.Framework.Input.Touch.TouchCollection+LocInfo */ 

(function LocInfo$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm05.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Input.Touch.TouchCollection+LocInfo", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Single, 
          $.Single
        ])
    );

    $.Field({Static:false, Public:true }, "Id", $.Int32); 
    $.Field({Static:false, Public:true }, "X", $.Single); 
    $.Field({Static:false, Public:true }, "Y", $.Single); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Input.Touch.TouchCollection+Enumerator */ 

(function Enumerator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm05.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Input.Touch.TouchCollection+Enumerator", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchCollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm05.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm05.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Field({Static:false, Public:false}, "collection", $asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchCollection")); 
    $.Field({Static:false, Public:false}, "position", $.Int32); 
    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm05.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")]), 
      /* 1 */ $asm05.TypeRef("System.IDisposable"), 
      /* 2 */ $asm05.TypeRef("System.Collections.IEnumerator")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Xna.Framework.Input.Touch.TouchLocationState */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.Input.Touch.TouchLocationState", 
    BaseType: $asm05.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Invalid: 0, 
    Released: 1, 
    Pressed: 2, 
    Moved: 3, 
  }
);

/* struct Microsoft.Xna.Framework.Input.Touch.TouchPanelCapabilities */ 

(function TouchPanelCapabilities$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm05.System.Boolean)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm05.System.Int32)) ();
  };

  function TouchPanelCapabilities_get_IsConnected () {
    return this.TouchPanelCapabilities$IsConnected$value;
  };

  function TouchPanelCapabilities_get_MaximumTouchCount () {
    return this.TouchPanelCapabilities$MaximumTouchCount$value;
  };

  function TouchPanelCapabilities_set_IsConnected (value) {
    this.TouchPanelCapabilities$IsConnected$value = value;
  };

  function TouchPanelCapabilities_set_MaximumTouchCount (value) {
    this.TouchPanelCapabilities$MaximumTouchCount$value = (value | 0);
  };

  JSIL.MakeType({
      BaseType: $asm05.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Input.Touch.TouchPanelCapabilities", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, "get_IsConnected", 
      JSIL.MethodSignature.Return($.Boolean), 
      TouchPanelCapabilities_get_IsConnected
    )
      .Attribute($asm05.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_MaximumTouchCount", 
      JSIL.MethodSignature.Return($.Int32), 
      TouchPanelCapabilities_get_MaximumTouchCount
    )
      .Attribute($asm05.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetCaps", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.Method({Static:false, Public:false}, "set_IsConnected", 
      JSIL.MethodSignature.Action($.Boolean), 
      TouchPanelCapabilities_set_IsConnected
    )
      .Attribute($asm05.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_MaximumTouchCount", 
      JSIL.MethodSignature.Action($.Int32), 
      TouchPanelCapabilities_set_MaximumTouchCount
    )
      .Attribute($asm05.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "TouchPanelCapabilities$IsConnected$value", $.Boolean)
      .Attribute($asm05.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TouchPanelCapabilities$MaximumTouchCount$value", $.Int32)
      .Attribute($asm05.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "IsConnected", $.Boolean);

    $.Property({Static:false, Public:true }, "MaximumTouchCount", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Input.Touch.TouchLocation */ 

(function TouchLocation$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm05.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Input.Touch.TouchLocation", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 7, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocationState"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Vector2")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocationState"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocationState"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Vector2")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocationState"), 
          $.Single, $.Single, 
          $asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocationState"), $.Single, 
          $.Single
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Id", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Position", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector2"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_State", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocationState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "TryGetPreviousLocation", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Type])])
    );

    $.Field({Static:false, Public:false}, "id", $.Int32); 
    $.Field({Static:false, Public:false}, "state", $asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocationState")); 
    $.Field({Static:false, Public:false}, "x", $.Single); 
    $.Field({Static:false, Public:false}, "y", $.Single); 
    $.Field({Static:false, Public:false}, "prevState", $asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocationState")); 
    $.Field({Static:false, Public:false}, "prevX", $.Single); 
    $.Field({Static:false, Public:false}, "prevY", $.Single); 
    $.Property({Static:false, Public:true }, "State", $asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocationState"));

    $.Property({Static:false, Public:true }, "Id", $.Int32);

    $.Property({Static:false, Public:true }, "Position", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.ImplementInterfaces(
      /* 0 */ $asm05.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Input.Touch.TouchPanel */ 

(function TouchPanel$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("Microsoft.Xna.Framework.Input.Touch.TouchPanel", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "get_DisplayHeight", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DisplayOrientation", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.DisplayOrientation"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DisplayWidth", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_EnabledGestures", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.GestureType"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_IsGestureAvailable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_WindowHandle", 
      JSIL.MethodSignature.Return($asm05.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:true , Public:true }, "GetCapabilities", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchPanelCapabilities"))
    );

    $.ExternalMethod({Static:true , Public:true }, "GetState", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchCollection"))
    );

    $.ExternalMethod({Static:true , Public:false}, "OnDisplaySettingsChanged", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadGesture", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.GestureSample"))
    );

    $.ExternalMethod({Static:true , Public:true }, "set_DisplayHeight", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "set_DisplayOrientation", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.DisplayOrientation"))
    );

    $.ExternalMethod({Static:true , Public:true }, "set_DisplayWidth", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "set_EnabledGestures", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.GestureType"))
    );

    $.ExternalMethod({Static:true , Public:true }, "set_WindowHandle", 
      JSIL.MethodSignature.Action($asm05.TypeRef("System.IntPtr"))
    );

    $.Constant({Static:true , Public:false}, "AllGestureTypes", 1023); 
    $.Field({Static:true , Public:false}, "nointerop", $.Boolean, false); 
    $.Field({Static:true , Public:false}, "prevState", $asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.XNAINPUT_TOUCH_LOCATION_STATE")); 
    $.Field({Static:true , Public:false}, "touchState", $asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchCollection")); 
    $.Field({Static:true , Public:false}, "displayOrientation", $asm00.TypeRef("Microsoft.Xna.Framework.DisplayOrientation")); 
    $.Field({Static:true , Public:false}, "displayWidth", $.Int32); 
    $.Field({Static:true , Public:false}, "displayHeight", $.Int32); 
    $.Field({Static:true , Public:false}, "displaySettingsChanged", $.Boolean); 
    $.Field({Static:true , Public:false}, "_enabledGestures", $asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.GestureType")); 
    $.Field({Static:true , Public:false}, "_haveGestureBeenEnabled", $.Boolean); 
    function TouchPanel__cctor () {
      $thisType.prevState = new $asm04.Microsoft.Xna.Framework.Input.Touch.XNAINPUT_TOUCH_LOCATION_STATE();
      $thisType.touchState = new $asm04.Microsoft.Xna.Framework.Input.Touch.TouchCollection();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      TouchPanel__cctor
    );

    $.Property({Static:true , Public:true }, "EnabledGestures", $asm04.TypeRef("Microsoft.Xna.Framework.Input.Touch.GestureType"));

    $.Property({Static:true , Public:true }, "IsGestureAvailable", $.Boolean);

    $.Property({Static:true , Public:true }, "WindowHandle", $asm05.TypeRef("System.IntPtr"));

    $.Property({Static:true , Public:true }, "DisplayOrientation", $asm00.TypeRef("Microsoft.Xna.Framework.DisplayOrientation"));

    $.Property({Static:true , Public:true }, "DisplayWidth", $.Int32);

    $.Property({Static:true , Public:true }, "DisplayHeight", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Input.Touch.XNAINPUT_TOUCH_LOCATION_STATE */ 

(function XNAINPUT_TOUCH_LOCATION_STATE$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm05.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Input.Touch.XNAINPUT_TOUCH_LOCATION_STATE", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "Count", $.Int32); 
    $.Field({Static:false, Public:true }, "Id0", $.Int32); 
    $.Field({Static:false, Public:true }, "Id1", $.Int32); 
    $.Field({Static:false, Public:true }, "Id2", $.Int32); 
    $.Field({Static:false, Public:true }, "Id3", $.Int32); 
    $.Field({Static:false, Public:true }, "X0", $.Single); 
    $.Field({Static:false, Public:true }, "Y0", $.Single); 
    $.Field({Static:false, Public:true }, "X1", $.Single); 
    $.Field({Static:false, Public:true }, "Y1", $.Single); 
    $.Field({Static:false, Public:true }, "X2", $.Single); 
    $.Field({Static:false, Public:true }, "Y2", $.Single); 
    $.Field({Static:false, Public:true }, "X3", $.Single); 
    $.Field({Static:false, Public:true }, "Y3", $.Single); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

