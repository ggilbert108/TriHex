/* Generated by JSIL v0.8.1 build 20416. See http://jsil.org/ for more information. */ 
var $asm0E = JSIL.DeclareAssembly("TriHex, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null");

JSIL.SetEntryPoint($asm0E, $asm0E.TypeRef("TriHex.Source.Program"), "Main", JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.String")])));

JSIL.DeclareNamespace("TriHex");
JSIL.DeclareNamespace("TriHex.Source");
/* class TriHex.Source.Board */ 

(function Board$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm05.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0E.TriHex.Source.Hexagon)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize(System.Array.Of($asm0E.TriHex.Source.Hexagon))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0E.TriHex.Source.Animation)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm03.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm03.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0E.TriHex.Source.Window)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Color)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize(System.Array.Of($asm0E.TriHex.Source.Hexagon))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Matrix)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm03.Microsoft.Xna.Framework.Graphics.SpriteSortMode)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm05.System.Boolean)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm06.System.Collections.Generic.SortedDictionary$b2.Of($asm05.System.Single, $asm0E.TriHex.Source.Hexagon))) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm05.System.Single)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm06.System.Collections.Generic.SortedDictionary$b2_Enumerator.Of($asm05.System.Single, $asm0E.TriHex.Source.Hexagon))) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm05.System.Collections.Generic.KeyValuePair$b2.Of($asm05.System.Single, $asm0E.TriHex.Source.Hexagon))) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm05.System.IDisposable)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Vector2))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Matrix"), [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix"), $asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("System.Collections.Generic.SortedDictionary`2", [$asm05.TypeRef("System.Single"), $asm0E.TypeRef("TriHex.Source.Hexagon")]), null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm05.System.IDisposable.Dispose)) ();
  };

  function Board__ctor (w, h) {
    this.set_width(w);
    this.set_height(h);
    this.grid = JSIL.MultidimensionalArray.New($T01(), this.get_height(), this.get_width());

    for (var i = 0; i < (this.get_height() | 0); i = ((i + 1) | 0)) {

      for (var j = 0; j < (this.get_width() | 0); j = ((j + 1) | 0)) {
        (this.grid).Set(i, j, new ($T01())(i, j));
      }
    }
    this.animation = new ($T03())();
    this.animation.isAnimating = false;
  };

  function Board_draw (spriteBatch) {
    var hexImage = $T06().hexImage;
    var outline = $T06().outlineImage;
    var x = 0;
    var xStep = ((+(hexImage.get_Width()) * 0.75) | 0);

    for (var i = 0; i < (this.grid.length0 | 0); i = ((i + 1) | 0)) {
      var y = 0;
      var yStep = (hexImage.get_Height() | 0);
      if (((i % 2) | 0) === 1) {
        y = ((yStep / 2) | 0);
      }

      for (var j = 0; j < (this.grid.length1 | 0); j = ((j + 1) | 0)) {
        var hex = (this.grid).Get(i, j);
        if (!this.animation.isAnimating || !(this.animation).containsHex(hex)) {
          spriteBatch.DrawRect(
            hexImage, 
            hex.get_bounds(), 
            hex.get_color()
          );
          spriteBatch.DrawRect(
            outline, 
            hex.get_bounds(), 
            $T07().get_White()
          );
          y = ((y + yStep) | 0);
        }
      }
      x = ((x + xStep) | 0);
    }
    if (this.animation.isAnimating) {
      var trihex = this.animation.trihex;

      for (var l = 0; l < (trihex.length | 0); l = ((l + 1) | 0)) {
        hex = trihex[l];
        spriteBatch.End();
        var center = this.animation.center.MemberwiseClone();
        var k = $S00().CallStatic($T0A(), "op_Multiply", null, 
          $S00().CallStatic($T0A(), "op_Multiply", null, 
            $T0A().CreateTranslation(-center.X, -center.Y, 0), 
            $T0A().CreateRotationZ(this.animation.theta)
          ), 
          $T0A().CreateTranslation(center.X, center.Y, 0)
        );
        spriteBatch.Begin(
          $T0B().Deferred, 
          null, 
          null, 
          null, 
          null, 
          null, 
          k.MemberwiseClone()
        );
        spriteBatch.DrawRect(
          hexImage, 
          hex.get_bounds(), 
          hex.get_color()
        );
        spriteBatch.DrawRect(
          outline, 
          hex.get_bounds(), 
          $T07().get_White()
        );
        spriteBatch.End();
        spriteBatch.Begin();
        this.animation.theta += 0.04;
        if (+this.animation.theta >= 2.0943951023931953) {
          (this.animation).reset();
        }
      }
    }
  };

  function Board_get_height () {
    return this._height;
  };

  function Board_get_width () {
    return this._width;
  };

  function Board_less (a, b, center) {
    if (!(((+a.X - +center.X) < 0) || ((+b.X - +center.X) >= 0))) {
      var result = true;
    } else if (!(((+a.X - +center.X) >= 0) || ((+b.X - +center.X) < 0))) {
      result = false;
    } else if (!(((+a.Y - +center.Y) < 0) && ((+b.Y - +center.Y) < 0))) {
      result = +a.Y > +b.Y;
    } else {
      result = +b.Y > +a.Y;
    }
    return result;
  };

  function Board_processClick (x, y) {
    var $temp00;
    if (!this.animation.isAnimating) {
      var trihex = JSIL.Array.New($T01(), 3);
      var map = $S01().Construct();

      for (var i = 0; i < (this.get_height() | 0); i = ((i + 1) | 0)) {

        for (var j = 0; j < (this.get_width() | 0); j = ((j + 1) | 0)) {
          var center = ((this.grid).Get(i, j)).get_center().MemberwiseClone();
          var dx = +x - +center.X;
          var dy = +y - +center.Y;
          var distance = (dx * dx) + (dy * dy);
          if (!map.ContainsKey(distance)) {
            map.Add(distance, (this.grid).Get(i, j));
          }
        }
      }
      var filled = 0;
      var enumerator = $T0D().prototype.GetEnumerator.call(map).MemberwiseClone();
      try {

      $loop2: 
        while ($T0F().prototype.MoveNext.call(enumerator)) {
          var pair = $T0F().prototype.get_Current.call(enumerator).MemberwiseClone();
          trihex[($temp00 = filled, 
            filled = ((filled + 1) | 0), 
            $temp00)] = pair.get_Value();
          if (filled >= 3) {
            break $loop2;
          }
        }
      } finally {
        $IM00().Call(enumerator, null);
      }
      var triCenter = $T09().get_Zero().MemberwiseClone();
      var vertices = (trihex[0]).get_vertices();

      for (var k = 0; k < (vertices.length | 0); k = ((k + 1) | 0)) {
        var vertex = vertices[k].MemberwiseClone();
        if (!(!(trihex[1]).sharesVertex(vertex) || !(trihex[2]).sharesVertex(vertex))) {
          triCenter = vertex;
        }
      }
      (this.animation).set(trihex, triCenter.MemberwiseClone());
      this.sortTri(trihex, triCenter);
    }
  };

  function Board_set_height (value) {
    this._height = (value | 0);
  };

  function Board_set_width (value) {
    this._width = (value | 0);
  };

  function Board_sortTri (tri, center) {

    for (var i = 0; i < (tri.length | 0); i = ((i + 1) | 0)) {

      for (var j = ((i + 1) | 0); j < (tri.length | 0); j = ((j + 1) | 0)) {
        if (this.less(
            (tri[j]).get_center(), 
            (tri[((j - 1) | 0)]).get_center(), 
            center
          )) {
          this.swap(tri, j, ((j - 1) | 0));
        }
      }
    }
  };

  function Board_swap (tri, a, b) {
    tri[a] = tri[b];
    tri[b] = tri[a];
  };

  JSIL.MakeType({
      BaseType: $asm05.TypeRef("System.Object"), 
      Name: "TriHex.Source.Board", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32]), 
      Board__ctor
    );

    $.Method({Static:false, Public:true }, "draw", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      Board_draw
    );

    $.Method({Static:false, Public:true }, "get_height", 
      JSIL.MethodSignature.Return($.Int32), 
      Board_get_height
    );

    $.Method({Static:false, Public:true }, "get_width", 
      JSIL.MethodSignature.Return($.Int32), 
      Board_get_width
    );

    $.Method({Static:false, Public:false}, "less", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Vector2")
        ]), 
      Board_less
    );

    $.Method({Static:false, Public:true }, "processClick", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32]), 
      Board_processClick
    );

    $.Method({Static:false, Public:true }, "set_height", 
      JSIL.MethodSignature.Action($.Int32), 
      Board_set_height
    );

    $.Method({Static:false, Public:true }, "set_width", 
      JSIL.MethodSignature.Action($.Int32), 
      Board_set_width
    );

    $.Method({Static:false, Public:false}, "sortTri", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("TriHex.Source.Hexagon")]), $asm00.TypeRef("Microsoft.Xna.Framework.Vector2")]), 
      Board_sortTri
    );

    $.Method({Static:false, Public:false}, "swap", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("TriHex.Source.Hexagon")]), $.Int32, 
          $.Int32
        ]), 
      Board_swap
    );

    $.Field({Static:false, Public:false}, "_width", $.Int32); 
    $.Field({Static:false, Public:false}, "_height", $.Int32); 
    $.Field({Static:false, Public:false}, "grid", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("TriHex.Source.Hexagon")])); 
    $.Field({Static:false, Public:false}, "animation", $asm0E.TypeRef("TriHex.Source.Animation")); 
    $.Property({Static:false, Public:true }, "width", $.Int32);

    $.Property({Static:false, Public:true }, "height", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct TriHex.Source.Animation */ 

(function Animation$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0E.TriHex.Source.Hexagon)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize(System.Array.Of($asm0E.TriHex.Source.Hexagon))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm05.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm05.System.Boolean)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Color))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Color)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector2)) ();
  };

  function Animation_containsHex (other) {
    var array = this.trihex;

    for (var i = 0; i < (array.length | 0); i = ((i + 1) | 0)) {
      var hex = array[i];
      if ($T03().prototype.Equals.call(hex.get_bounds(), other.get_bounds())) {
        var result = true;
        return result;
      }
    }
    result = false;
    return result;
  };

  function Animation_reset () {
    this.isAnimating = false;
    var newHex = JSIL.Array.New($T06(), [(this.trihex[2]).get_color(), (this.trihex[0]).get_color(), (this.trihex[1]).get_color()]);

    for (var i = 0; i < 3; i = ((i + 1) | 0)) {
      (this.trihex[i].color = newHex[i].MemberwiseClone());
    }
  };

  function Animation_set (tri, mid) {
    this.isAnimating = true;
    this.trihex = tri;
    this.center = mid.MemberwiseClone();
    this.theta = 0;
  };

  JSIL.MakeType({
      BaseType: $asm05.TypeRef("System.ValueType"), 
      Name: "TriHex.Source.Animation", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, "containsHex", 
      new JSIL.MethodSignature($.Boolean, [$asm0E.TypeRef("TriHex.Source.Hexagon")]), 
      Animation_containsHex
    );

    $.Method({Static:false, Public:true }, "reset", 
      JSIL.MethodSignature.Void, 
      Animation_reset
    );

    $.Method({Static:false, Public:true }, "set", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("TriHex.Source.Hexagon")]), $asm00.TypeRef("Microsoft.Xna.Framework.Vector2")]), 
      Animation_set
    );

    $.Field({Static:false, Public:true }, "isAnimating", $.Boolean); 
    $.Field({Static:false, Public:true }, "trihex", $jsilcore.TypeRef("System.Array", [$asm0E.TypeRef("TriHex.Source.Hexagon")])); 
    $.Field({Static:false, Public:true }, "center", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:true }, "theta", $.Single); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class TriHex.Source.Hexagon */ 

(function Hexagon$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm05.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Color))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Color)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm05.System.Random)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0E.TriHex.Source.Window)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm03.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Point)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Vector2))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm05.System.Single)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0E.TriHex.Source.Util)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm05.System.Boolean)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm05.TypeRef("System.Single"), $asm05.TypeRef("System.Single")]))) ();
  };

  function Hexagon__ctor (r, c) {
    this.row = (r | 0);
    this.col = (c | 0);
    var possible = JSIL.Array.New($T02(), [$T02().get_Red(), $T02().get_Blue(), $T02().get_Green(), $T02().get_Purple(), $T02().get_Orange(), $T02().get_Yellow()]);
    var index = ($T04().random.Next(6) | 0);
    (this.color = possible[index].MemberwiseClone());
    var width = ($T04().hexImage.get_Width() | 0);
    var height = ($T04().hexImage.get_Height() | 0);
    var x = ((+((c | 0) * width) * 0.75) | 0);
    var y = Math.imul(r, height);
    if ((((c | 0) % 2) | 0) === 1) {
      y = ((y + ((height / 2) | 0)) | 0);
    }
    (this.bounds = new ($T06())(x, y, width, height));
  };

  function Hexagon_get_bounds () {
    return this._bounds;
  };

  function Hexagon_get_center () {
    var centerPoint = (this.get_bounds()).get_Center().MemberwiseClone();
    return $S00().Construct(+(centerPoint.X), +(centerPoint.Y));
  };

  function Hexagon_get_color () {
    return this._color;
  };

  function Hexagon_get_vertices () {
    var origin = $S00().Construct(+(this.get_bounds().X), +(this.get_bounds().Y));
    var left = $T08().op_Addition(origin, $S00().Construct(0, +(((this.get_bounds().Height | 0) / 2 | 0))));
    var right = $T08().op_Addition(origin, $S00().Construct(+(this.get_bounds().Width), +(((this.get_bounds().Height | 0) / 2 | 0))));
    var topLeft = $T08().op_Addition(origin, $S00().Construct((+(this.get_bounds().Width) * 0.25), 0));
    var topRight = $T08().op_Addition(origin, $S00().Construct((+(this.get_bounds().Width) * 0.75), 0));
    var bottomLeft = $T08().op_Addition(origin, $S00().Construct((+(this.get_bounds().Width) * 0.25), +(this.get_bounds().Height)));
    var bottomRight = $T08().op_Addition(origin, $S00().Construct((+(this.get_bounds().Width) * 0.75), +(this.get_bounds().Height)));
    return JSIL.Array.New($T08(), [left, right, topLeft, topRight, bottomRight, bottomLeft]);
  };

  function Hexagon_set_bounds (value) {
    this._bounds = value.MemberwiseClone();
  };

  function Hexagon_set_color (value) {
    this._color = value.MemberwiseClone();
  };

  function Hexagon_sharesVertex (other) {
    var vertices = this.get_vertices();

    for (var i = 0; i < (vertices.length | 0); i = ((i + 1) | 0)) {
      var vertex = vertices[i].MemberwiseClone();
      var distance = +$T0B().distance(other, vertex);
      if (distance < 10) {
        var result = true;
        return result;
      }
    }
    result = false;
    return result;
  };

  JSIL.MakeType({
      BaseType: $asm05.TypeRef("System.Object"), 
      Name: "TriHex.Source.Hexagon", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32]), 
      Hexagon__ctor
    );

    $.Method({Static:false, Public:true }, "get_bounds", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Rectangle")), 
      Hexagon_get_bounds
    );

    $.Method({Static:false, Public:true }, "get_center", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      Hexagon_get_center
    );

    $.Method({Static:false, Public:true }, "get_color", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Color")), 
      Hexagon_get_color
    );

    $.Method({Static:false, Public:true }, "get_vertices", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector2")])), 
      Hexagon_get_vertices
    );

    $.Method({Static:false, Public:true }, "set_bounds", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Rectangle")), 
      Hexagon_set_bounds
    );

    $.Method({Static:false, Public:true }, "set_color", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Color")), 
      Hexagon_set_color
    );

    $.Method({Static:false, Public:true }, "sharesVertex", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.Xna.Framework.Vector2")]), 
      Hexagon_sharesVertex
    );

    $.Field({Static:false, Public:false}, "_color", $asm00.TypeRef("Microsoft.Xna.Framework.Color")); 
    $.Field({Static:false, Public:false}, "_bounds", $asm00.TypeRef("Microsoft.Xna.Framework.Rectangle")); 
    $.Field({Static:false, Public:true }, "row", $.Int32); 
    $.Field({Static:false, Public:true }, "col", $.Int32); 
    $.Property({Static:false, Public:true }, "color", $asm00.TypeRef("Microsoft.Xna.Framework.Color"));

    $.Property({Static:false, Public:true }, "bounds", $asm00.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Property({Static:false, Public:true }, "vertices", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector2")]));

    $.Property({Static:false, Public:true }, "center", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum TriHex.Source.MouseButtons */ 

JSIL.MakeEnum(
  {
    FullName: "TriHex.Source.MouseButtons", 
    BaseType: $asm05.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    LeftButton: 0, 
    MiddleButton: 1, 
    RightButton: 2, 
    ExtraButton1: 3, 
    ExtraButton2: 4, 
  }
);

/* class TriHex.Source.InputHelper */ 

(function InputHelper$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.PlayerIndex)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.Buttons)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.Keys)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.GamePadThumbSticks)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.GamePadState)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.GamePadTriggers)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.MouseState)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.KeyboardState)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0E.TriHex.Source.MouseButtons)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm05.System.Boolean)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.ButtonState)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.GamePad)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.Keyboard)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.Mouse)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm05.TypeRef("System.Boolean"), [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Buttons")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm05.TypeRef("System.Boolean"), [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Keys")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm05.TypeRef("System.Single"), $asm05.TypeRef("System.Single")]))) ();
  };

  function InputHelper__ctor () {
    this._index = $T00().One;
    this.refreshData = false;
  };

  function InputHelper_get_CurrentGamepadState () {
    return this._currentGamepadState;
  };

  function InputHelper_get_CurrentKeyboardState () {
    return this._currentKeyboardState;
  };

  function InputHelper_get_CurrentMouseState () {
    return this._currentMouseState;
  };

  function InputHelper_get_ExitRequested () {
    return (($S00().CallVirtual("IsCurPress", null, this, $T01().Start) && 
        $S00().CallVirtual("IsCurPress", null, this, $T01().Back)) || $S01().CallVirtual("IsCurPress", null, this, $T02().Escape));
  };

  function InputHelper_get_Index () {
    return this._index;
  };

  function InputHelper_get_LastGamepadState () {
    return this._lastGamepadState;
  };

  function InputHelper_get_LastKeyboardState () {
    return this._lastKeyboardState;
  };

  function InputHelper_get_LastMouseState () {
    return this._lastMouseState;
  };

  function InputHelper_get_LeftStickPosition () {
    return $S02().Construct(((this._currentGamepadState).get_ThumbSticks()).get_Left().X, -((this.get_CurrentGamepadState()).get_ThumbSticks()).get_Left().Y);
  };

  function InputHelper_get_LeftStickVelocity () {
    var temp = $T03().op_Subtraction(
      ((this._currentGamepadState).get_ThumbSticks()).get_Left(), 
      ((this._lastGamepadState).get_ThumbSticks()).get_Left()
    );
    return $S02().Construct(temp.X, -temp.Y);
  };

  function InputHelper_get_LeftTriggerPosition () {
    return ((this._currentGamepadState).get_Triggers()).get_Left();
  };

  function InputHelper_get_LeftTriggerVelocity () {
    return (+((this._currentGamepadState).get_Triggers()).get_Left() - +((this._lastGamepadState).get_Triggers()).get_Left());
  };

  function InputHelper_get_MousePosition () {
    return $S02().Construct(+((this._currentMouseState).get_X()), +((this._currentMouseState).get_Y()));
  };

  function InputHelper_get_MouseScrollWheelPosition () {
    return +((this._currentMouseState).get_ScrollWheelValue());
  };

  function InputHelper_get_MouseScrollWheelVelocity () {
    return +(((this._currentMouseState).get_ScrollWheelValue() | 0) - ((this._lastMouseState).get_ScrollWheelValue() | 0));
  };

  function InputHelper_get_MouseVelocity () {
    return $T03().op_Subtraction(
      $S02().Construct(+((this._currentMouseState).get_X()), +((this._currentMouseState).get_Y())), 
      $S02().Construct(+((this._lastMouseState).get_X()), +((this._lastMouseState).get_Y()))
    );
  };

  function InputHelper_get_RightStickPosition () {
    return $S02().Construct(((this._currentGamepadState).get_ThumbSticks()).get_Right().X, -((this._currentGamepadState).get_ThumbSticks()).get_Right().Y);
  };

  function InputHelper_get_RightStickVelocity () {
    var temp = $T03().op_Subtraction(
      ((this._currentGamepadState).get_ThumbSticks()).get_Right(), 
      ((this._lastGamepadState).get_ThumbSticks()).get_Right()
    );
    return $S02().Construct(temp.X, -temp.Y);
  };

  function InputHelper_get_RightTriggerPosition () {
    return ((this._currentGamepadState).get_Triggers()).get_Right();
  };

  function InputHelper_get_RightTriggerVelocity () {
    return (+((this._currentGamepadState).get_Triggers()).get_Right() - +((this._lastGamepadState).get_Triggers()).get_Right());
  };

  function InputHelper_IsCurPress$00 (button) {
    return ((this._lastGamepadState).IsButtonDown(button) && (this._currentGamepadState).IsButtonDown(button));
  };

  function InputHelper_IsCurPress$01 (key) {
    return ((this._lastKeyboardState).IsKeyDown(key) && (this._currentKeyboardState).IsKeyDown(key));
  };

  function InputHelper_IsCurPress$02 (button) {
    switch (button.valueOf()) {
      case 0: 
        var result = ((this._lastMouseState).get_LeftButton() === $T0B().Pressed) && 
        ((this._currentMouseState).get_LeftButton() === $T0B().Pressed);
        break;

      case 1: 
        result = ((this._lastMouseState).get_MiddleButton() === $T0B().Pressed) && 
        ((this._currentMouseState).get_MiddleButton() === $T0B().Pressed);
        break;

      case 2: 
        result = ((this._lastMouseState).get_RightButton() === $T0B().Pressed) && 
        ((this._currentMouseState).get_RightButton() === $T0B().Pressed);
        break;

      case 3: 
        result = ((this._lastMouseState).get_XButton1() === $T0B().Pressed) && 
        ((this._currentMouseState).get_XButton1() === $T0B().Pressed);
        break;

      case 4: 
        result = ((this._lastMouseState).get_XButton2() === $T0B().Pressed) && 
        ((this._currentMouseState).get_XButton2() === $T0B().Pressed);
        break;

      default: 
        result = false;
        break;

    }
    return result;
  };

  function InputHelper_IsNewPress$03 (button) {
    return ((this._lastGamepadState).IsButtonUp(button) && (this._currentGamepadState).IsButtonDown(button));
  };

  function InputHelper_IsNewPress$04 (key) {
    return ((this._lastKeyboardState).IsKeyUp(key) && (this._currentKeyboardState).IsKeyDown(key));
  };

  function InputHelper_IsNewPress$05 (button) {
    switch (button.valueOf()) {
      case 0: 
        var result = ((((this._lastMouseState).get_LeftButton()).valueOf() | 0) === 0) && 
        ((this._currentMouseState).get_LeftButton() === $T0B().Pressed);
        break;

      case 1: 
        result = ((((this._lastMouseState).get_MiddleButton()).valueOf() | 0) === 0) && 
        ((this._currentMouseState).get_MiddleButton() === $T0B().Pressed);
        break;

      case 2: 
        result = ((((this._lastMouseState).get_RightButton()).valueOf() | 0) === 0) && 
        ((this._currentMouseState).get_RightButton() === $T0B().Pressed);
        break;

      case 3: 
        result = ((((this._lastMouseState).get_XButton1()).valueOf() | 0) === 0) && 
        ((this._currentMouseState).get_XButton1() === $T0B().Pressed);
        break;

      case 4: 
        result = ((((this._lastMouseState).get_XButton2()).valueOf() | 0) === 0) && 
        ((this._currentMouseState).get_XButton2() === $T0B().Pressed);
        break;

      default: 
        result = false;
        break;

    }
    return result;
  };

  function InputHelper_IsOldPress$06 (button) {
    return ((this._lastGamepadState).IsButtonDown(button) && (this._currentGamepadState).IsButtonUp(button));
  };

  function InputHelper_IsOldPress$07 (key) {
    return ((this._lastKeyboardState).IsKeyDown(key) && (this._currentKeyboardState).IsKeyUp(key));
  };

  function InputHelper_IsOldPress$08 (button) {
    switch (button.valueOf()) {
      case 0: 
        var result = ((this._lastMouseState).get_LeftButton() === $T0B().Pressed) && 
        ((this._currentMouseState).get_LeftButton() === $T0B().Released);
        break;

      case 1: 
        result = ((this._lastMouseState).get_MiddleButton() === $T0B().Pressed) && 
        ((this._currentMouseState).get_MiddleButton() === $T0B().Released);
        break;

      case 2: 
        result = ((this._lastMouseState).get_RightButton() === $T0B().Pressed) && 
        ((this._currentMouseState).get_RightButton() === $T0B().Released);
        break;

      case 3: 
        result = ((this._lastMouseState).get_XButton1() === $T0B().Pressed) && 
        ((this._currentMouseState).get_XButton1() === $T0B().Released);
        break;

      case 4: 
        result = ((this._lastMouseState).get_XButton2() === $T0B().Pressed) && 
        ((this._currentMouseState).get_XButton2() === $T0B().Released);
        break;

      default: 
        result = false;
        break;

    }
    return result;
  };

  function InputHelper_set_Index (value) {
    this._index = value;
    if (this.refreshData) {
      this.Update();
      this.Update();
    }
  };

  function InputHelper_Update () {
    if (!this.refreshData) {
      this.refreshData = true;
    }
    var flag = 0 === 0;
    this._lastGamepadState = this._currentGamepadState.MemberwiseClone();
    this._currentGamepadState = $T0C().GetState(this._index).MemberwiseClone();
    flag = 0 === 0;
    this._lastKeyboardState = this._currentKeyboardState.MemberwiseClone();
    this._currentKeyboardState = $T0D().GetState().MemberwiseClone();
    flag = 0 === 0;
    this._lastMouseState = this._currentMouseState.MemberwiseClone();
    this._currentMouseState = $T0E().GetState().MemberwiseClone();
  };

  JSIL.MakeType({
      BaseType: $asm05.TypeRef("System.Object"), 
      Name: "TriHex.Source.InputHelper", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      InputHelper__ctor
    );

    $.Method({Static:false, Public:true }, "get_CurrentGamepadState", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Input.GamePadState")), 
      InputHelper_get_CurrentGamepadState
    );

    $.Method({Static:false, Public:true }, "get_CurrentKeyboardState", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Input.KeyboardState")), 
      InputHelper_get_CurrentKeyboardState
    );

    $.Method({Static:false, Public:true }, "get_CurrentMouseState", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Input.MouseState")), 
      InputHelper_get_CurrentMouseState
    );

    $.Method({Static:false, Public:true }, "get_ExitRequested", 
      JSIL.MethodSignature.Return($.Boolean), 
      InputHelper_get_ExitRequested
    );

    $.Method({Static:false, Public:true }, "get_Index", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.PlayerIndex")), 
      InputHelper_get_Index
    );

    $.Method({Static:false, Public:true }, "get_LastGamepadState", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Input.GamePadState")), 
      InputHelper_get_LastGamepadState
    );

    $.Method({Static:false, Public:true }, "get_LastKeyboardState", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Input.KeyboardState")), 
      InputHelper_get_LastKeyboardState
    );

    $.Method({Static:false, Public:true }, "get_LastMouseState", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Input.MouseState")), 
      InputHelper_get_LastMouseState
    );

    $.Method({Static:false, Public:true }, "get_LeftStickPosition", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      InputHelper_get_LeftStickPosition
    );

    $.Method({Static:false, Public:true }, "get_LeftStickVelocity", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      InputHelper_get_LeftStickVelocity
    );

    $.Method({Static:false, Public:true }, "get_LeftTriggerPosition", 
      JSIL.MethodSignature.Return($.Single), 
      InputHelper_get_LeftTriggerPosition
    );

    $.Method({Static:false, Public:true }, "get_LeftTriggerVelocity", 
      JSIL.MethodSignature.Return($.Single), 
      InputHelper_get_LeftTriggerVelocity
    );

    $.Method({Static:false, Public:true }, "get_MousePosition", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      InputHelper_get_MousePosition
    );

    $.Method({Static:false, Public:true }, "get_MouseScrollWheelPosition", 
      JSIL.MethodSignature.Return($.Single), 
      InputHelper_get_MouseScrollWheelPosition
    );

    $.Method({Static:false, Public:true }, "get_MouseScrollWheelVelocity", 
      JSIL.MethodSignature.Return($.Single), 
      InputHelper_get_MouseScrollWheelVelocity
    );

    $.Method({Static:false, Public:true }, "get_MouseVelocity", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      InputHelper_get_MouseVelocity
    );

    $.Method({Static:false, Public:true }, "get_RightStickPosition", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      InputHelper_get_RightStickPosition
    );

    $.Method({Static:false, Public:true }, "get_RightStickVelocity", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      InputHelper_get_RightStickVelocity
    );

    $.Method({Static:false, Public:true }, "get_RightTriggerPosition", 
      JSIL.MethodSignature.Return($.Single), 
      InputHelper_get_RightTriggerPosition
    );

    $.Method({Static:false, Public:true }, "get_RightTriggerVelocity", 
      JSIL.MethodSignature.Return($.Single), 
      InputHelper_get_RightTriggerVelocity
    );

    $.Method({Static:false, Public:true }, "IsCurPress", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Buttons")]), 
      InputHelper_IsCurPress$00
    );

    $.Method({Static:false, Public:true }, "IsCurPress", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Keys")]), 
      InputHelper_IsCurPress$01
    );

    $.Method({Static:false, Public:true }, "IsCurPress", 
      new JSIL.MethodSignature($.Boolean, [$asm0E.TypeRef("TriHex.Source.MouseButtons")]), 
      InputHelper_IsCurPress$02
    );

    $.Method({Static:false, Public:true }, "IsNewPress", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Buttons")]), 
      InputHelper_IsNewPress$03
    );

    $.Method({Static:false, Public:true }, "IsNewPress", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Keys")]), 
      InputHelper_IsNewPress$04
    );

    $.Method({Static:false, Public:true }, "IsNewPress", 
      new JSIL.MethodSignature($.Boolean, [$asm0E.TypeRef("TriHex.Source.MouseButtons")]), 
      InputHelper_IsNewPress$05
    );

    $.Method({Static:false, Public:true }, "IsOldPress", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Buttons")]), 
      InputHelper_IsOldPress$06
    );

    $.Method({Static:false, Public:true }, "IsOldPress", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Keys")]), 
      InputHelper_IsOldPress$07
    );

    $.Method({Static:false, Public:true }, "IsOldPress", 
      new JSIL.MethodSignature($.Boolean, [$asm0E.TypeRef("TriHex.Source.MouseButtons")]), 
      InputHelper_IsOldPress$08
    );

    $.Method({Static:false, Public:true }, "set_Index", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.PlayerIndex")), 
      InputHelper_set_Index
    );

    $.Method({Static:false, Public:true }, "Update", 
      JSIL.MethodSignature.Void, 
      InputHelper_Update
    );

    $.Field({Static:false, Public:false}, "_lastGamepadState", $asm00.TypeRef("Microsoft.Xna.Framework.Input.GamePadState")); 
    $.Field({Static:false, Public:false}, "_currentGamepadState", $asm00.TypeRef("Microsoft.Xna.Framework.Input.GamePadState")); 
    $.Field({Static:false, Public:false}, "_lastKeyboardState", $asm00.TypeRef("Microsoft.Xna.Framework.Input.KeyboardState")); 
    $.Field({Static:false, Public:false}, "_currentKeyboardState", $asm00.TypeRef("Microsoft.Xna.Framework.Input.KeyboardState")); 
    $.Field({Static:false, Public:false}, "_lastMouseState", $asm00.TypeRef("Microsoft.Xna.Framework.Input.MouseState")); 
    $.Field({Static:false, Public:false}, "_currentMouseState", $asm00.TypeRef("Microsoft.Xna.Framework.Input.MouseState")); 
    $.Field({Static:false, Public:false}, "_index", $asm00.TypeRef("Microsoft.Xna.Framework.PlayerIndex")); 
    $.Field({Static:false, Public:false}, "refreshData", $.Boolean); 
    $.Property({Static:false, Public:true }, "LastGamepadState", $asm00.TypeRef("Microsoft.Xna.Framework.Input.GamePadState"));

    $.Property({Static:false, Public:true }, "CurrentGamepadState", $asm00.TypeRef("Microsoft.Xna.Framework.Input.GamePadState"));

    $.Property({Static:false, Public:true }, "Index", $asm00.TypeRef("Microsoft.Xna.Framework.PlayerIndex"));

    $.Property({Static:false, Public:true }, "LastKeyboardState", $asm00.TypeRef("Microsoft.Xna.Framework.Input.KeyboardState"));

    $.Property({Static:false, Public:true }, "CurrentKeyboardState", $asm00.TypeRef("Microsoft.Xna.Framework.Input.KeyboardState"));

    $.Property({Static:false, Public:true }, "LastMouseState", $asm00.TypeRef("Microsoft.Xna.Framework.Input.MouseState"));

    $.Property({Static:false, Public:true }, "CurrentMouseState", $asm00.TypeRef("Microsoft.Xna.Framework.Input.MouseState"));

    $.Property({Static:false, Public:true }, "LeftStickPosition", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Property({Static:false, Public:true }, "RightStickPosition", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Property({Static:false, Public:true }, "LeftStickVelocity", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Property({Static:false, Public:true }, "RightStickVelocity", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Property({Static:false, Public:true }, "LeftTriggerPosition", $.Single);

    $.Property({Static:false, Public:true }, "RightTriggerPosition", $.Single);

    $.Property({Static:false, Public:true }, "LeftTriggerVelocity", $.Single);

    $.Property({Static:false, Public:true }, "RightTriggerVelocity", $.Single);

    $.Property({Static:false, Public:true }, "MousePosition", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Property({Static:false, Public:true }, "MouseVelocity", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Property({Static:false, Public:true }, "MouseScrollWheelPosition", $.Single);

    $.Property({Static:false, Public:true }, "MouseScrollWheelVelocity", $.Single);

    $.Property({Static:false, Public:true }, "ExitRequested", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class TriHex.Source.Program */ 

(function Program$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize(System.Array.Of($asm05.System.String))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0E.TriHex.Source.Window)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Game)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm05.System.IDisposable)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm05.System.IDisposable.Dispose)) ();
  };

  function Program_Main (args) {
    var game = new ($T01())();
    try {
      game.Run();
    } finally {
      if (game !== null) {
        $IM00().Call(game, null);
      }
    }
  };

  JSIL.MakeStaticClass("TriHex.Source.Program", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:false}, "Main", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String])), 
      Program_Main
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class TriHex.Source.Util */ 

(function Util$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm05.System.Single)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm05.System.Math)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm05.System.Double)) ();
  };

  function Util_distance (a, b) {
    var dx = +a.X - +b.X;
    var dy = +a.Y - +b.Y;
    var result = (dx * dx) + (dy * dy);
    return Math.fround(Math.sqrt(result));
  };

  JSIL.MakeStaticClass("TriHex.Source.Util", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:true }, "distance", 
      new JSIL.MethodSignature($.Single, [$asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm00.TypeRef("Microsoft.Xna.Framework.Vector2")]), 
      Util_distance
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class TriHex.Source.Window */ 

(function Window$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Game)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.GraphicsDeviceManager)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentManager)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm03.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Color)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm03.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0E.TriHex.Source.Board)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm05.System.Random)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0E.TriHex.Source.InputHelper)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm03.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.MouseState)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.Mouse)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.ButtonState)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm0E.TriHex.Source.MouseButtons)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm05.TypeRef("System.Random"), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm05.TypeRef("System.Boolean"), [$asm0E.TypeRef("TriHex.Source.MouseButtons")]))) ();
  };

  function Window__ctor () {
    $T00().prototype._ctor.call(this);
    this.graphics = new ($T01())(this);
    (this.get_Content()).set_RootDirectory("Content");
    this.set_IsMouseVisible(true);
  };

  function Window_Draw (gameTime) {
    this.get_GraphicsDevice().InternalClear($T05().get_Beige());
    (this.spriteBatch).Begin();
    (this.board).draw(this.spriteBatch);
    (this.spriteBatch).End();
    $T00().prototype.Draw.call(this, gameTime);
  };

  function Window_Initialize () {
    $thisType.random = $S00().Construct();
    this.helper = new ($T09())();
    $T00().prototype.Initialize.call(this);
  };

  function Window_LoadContent () {
    this.spriteBatch = new ($T06())(this.get_GraphicsDevice());
    $thisType.hexImage = (this.get_Content()).Load$b1($T0A())("hex");
    $thisType.outlineImage = (this.get_Content()).Load$b1($T0A())("outline");
    this.board = new ($T07())(10, 5);
  };

  function Window_UnloadContent () {
  };

  function Window_Update (gameTime) {
    var mouseState = $T0C().GetState();
    (this.helper).Update();
    if (!((mouseState.get_LeftButton() !== $T0D().Pressed) || !$S01().CallVirtual("IsNewPress", null, this.helper, $T0E().LeftButton))) {
      (this.board).processClick(
        mouseState.get_X(), 
        mouseState.get_Y()
      );
    }
    $T00().prototype.Update.call(this, gameTime);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Game"), 
      Name: "TriHex.Source.Window", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Window__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Draw", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.GameTime")), 
      Window_Draw
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Void, 
      Window_Initialize
    );

    $.Method({Static:false, Public:false, Virtual:true }, "LoadContent", 
      JSIL.MethodSignature.Void, 
      Window_LoadContent
    );

    $.Method({Static:false, Public:false, Virtual:true }, "UnloadContent", 
      JSIL.MethodSignature.Void, 
      Window_UnloadContent
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Update", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.GameTime")), 
      Window_Update
    );

    $.Field({Static:false, Public:false}, "graphics", $asm01.TypeRef("Microsoft.Xna.Framework.GraphicsDeviceManager")); 
    $.Field({Static:false, Public:false}, "spriteBatch", $asm03.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")); 
    $.Field({Static:false, Public:false}, "helper", $asm0E.TypeRef("TriHex.Source.InputHelper")); 
    $.Field({Static:true , Public:true }, "random", $asm05.TypeRef("System.Random")); 
    $.Field({Static:false, Public:false}, "board", $asm0E.TypeRef("TriHex.Source.Board")); 
    $.Field({Static:true , Public:true }, "hexImage", $asm03.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "outlineImage", $asm03.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

